System.register(['angular2/core'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1;
    var GameComponent;
    return {
        setters:[
            function (core_1_1) {
                core_1 = core_1_1;
            }],
        execute: function() {
            GameComponent = (function () {
                function GameComponent() {
                    this.playIt = true; // Play is avaliable
                    this.congrate = false; // The player win
                    this.counter = 12; // How many wrong times player can do
                    this.wordArr = []; // Convert the word to array of letters
                    /*
                      Real data from wordnik from this link:
                      http://api.wordnik.com:80/v4/word.json/forest/relatedWords?useCanonical=false&limitPerRelationshipType=1000&api_key=a2a73e7b926c924fad7001ca3111acd55af2ffabf50eb4ae5
                     */
                    this.info = [
                        {
                            "relationshipType": "antonym",
                            "words": ["prairie"]
                        },
                        {
                            "relationshipType": "verb-form",
                            "words": ["fored", "forested", "foresting", "forests"]
                        },
                        {
                            "relationshipType": "cross-reference",
                            "words": ["crown forest", "composite forest", "national forest", "right of forest", "town forest", "rain forest", "sprout forest", "savanna forest", "forest liberties", "forest law", "federal forest reserve", "drift of the forest", "fringing forest", "protection forest", "soil", "forest army-worm", "pure forest", "park forest", "submarine forest", "normal forest", "keeper of the forest", "ordinance of the forest", "forest service", "forest influences", "forest-bed group", "national forest reserve", "charter of the forest", "absolute forest land", "communal forest", "monsoon forest", "forest court", "cromer forest-bed", "index forest", "forest floor", "light forest", "thorn forest", "holt", "wood", "jungle", "deforest", "weald", "bush", "woodland", "woods"]
                        },
                        {
                            "relationshipType": "etymologically-related-term",
                            "words": ["afforest"]
                        },
                        {
                            "relationshipType": "synonym",
                            "words": ["sylvan", "woodland", "wildwood"]
                        },
                        {
                            "relationshipType": "rhyme",
                            "words": ["Forrest", "deforest", "florist", "reforest"]
                        },
                        {
                            "relationshipType": "same-context",
                            "words": ["wood", "mountain", "jungle", "desert", "garden", "land", "grove", "sea", "grass", "field", "sky", "ocean", "region", "meadow", "landscape"]
                        }
                    ];
                }
                GameComponent.prototype.ngOnInit = function () {
                    this.declearDate();
                    // Just for tester, to know what is the missing word
                    console.log(this.randomWord);
                };
                // Give values for variables
                GameComponent.prototype.declearDate = function () {
                    this.num1 = this.getRandomInt(0, this.info.length);
                    this.num2 = this.getRandomInt(0, this.info[this.num1].words.length);
                    this.randomWord = this.info[this.num1].words[this.num2];
                    this.word = this.randomWord.toLowerCase();
                    this.wordArr = this.word.split("");
                    this.wordArrDashes = this.fillArray("_", this.wordArr.length);
                    this.fillSpaces();
                };
                // Called when the user press 'Check' button
                GameComponent.prototype.checkLetter = function (letter) {
                    this.letterInArray(this.wordArr, this.wordArrDashes, letter.toLowerCase(), this.wordArr.length);
                };
                // Make array of dashes with same length of the word
                GameComponent.prototype.fillArray = function (value, len) {
                    var arr = [];
                    for (var i = 0; i < len; i++) {
                        arr.push(value);
                    }
                    return arr;
                };
                //Fill down all spaces
                GameComponent.prototype.fillSpaces = function () {
                    for (var i = 0; i < this.wordArr.length; i++) {
                        if (this.wordArr[i] == ' ') {
                            this.wordArrDashes[i] = ' ';
                        }
                    }
                };
                //Check if the letter is in the array and check Number of Remaining Attempts and (Congrate or Game over)
                GameComponent.prototype.letterInArray = function (oldArr, newArr, letter, len) {
                    var inIt = 0;
                    var correctCounter = 0;
                    for (var i = 0; i < len; i++) {
                        if (oldArr[i] == letter) {
                            newArr[i] = letter;
                            ++inIt;
                        }
                    }
                    if (inIt <= 0) {
                        this.counter -= 1;
                        if (this.counter <= 0) {
                            this.playIt = false;
                        }
                    }
                    this.congrate = this.arraysEqual(oldArr, newArr);
                };
                // Check Two Arrays if they are same
                GameComponent.prototype.arraysEqual = function (arr1, arr2) {
                    if (arr1.length !== arr2.length)
                        return false;
                    for (var i = arr1.length; i--;) {
                        if (arr1[i] !== arr2[i])
                            return false;
                    }
                    return true;
                };
                // Get random number between two numbers
                GameComponent.prototype.getRandomInt = function (min, max) {
                    return Math.floor(Math.random() * ((max - 1) - min + 1)) + min;
                };
                GameComponent = __decorate([
                    core_1.Component({
                        selector: 'gameComp',
                        template: "\n     <div class=\"game-section\">\n       <div class=\"container\">\n         <div class=\"row\">\n           <div class=\"col-xs-12\"> \n             <div *ngIf=\"playIt && !congrate\">\n               <div class=\"box\">\n                 <img alt=\"part1\" class=\"head\" *ngIf=\"counter<12\"\n                      src=\"https://raw.githubusercontent.com/netguru/frontend-recruitment-task/master/imgs/head.png\">\n                 <img alt=\"part1\" class=\"neck\" *ngIf=\"counter<11\"\n                      src=\"https://raw.githubusercontent.com/netguru/frontend-recruitment-task/master/imgs/neck.png\">\n                 <img alt=\"part2\" class=\"corpus\" *ngIf=\"counter<10\"\n                      src=\"https://raw.githubusercontent.com/netguru/frontend-recruitment-task/master/imgs/corpus.png\">\n                 <img alt=\"part3\" class=\"right-arm\" *ngIf=\"counter<9\"\n                      src=\"https://raw.githubusercontent.com/netguru/frontend-recruitment-task/master/imgs/right-arm.png\">\n                 <img alt=\"part4\" class=\"left-arm\" *ngIf=\"counter<8\"\n                      src=\"https://raw.githubusercontent.com/netguru/frontend-recruitment-task/master/imgs/left-arm.png\">\n                 <img alt=\"part5\" class=\"right-hand\" *ngIf=\"counter<7\"\n                      src=\"https://raw.githubusercontent.com/netguru/frontend-recruitment-task/master/imgs/right-hand.png\">\n                 <img alt=\"part6\" class=\"left-hand\" *ngIf=\"counter<6\"\n                      src=\"https://raw.githubusercontent.com/netguru/frontend-recruitment-task/master/imgs/right-hand.png\">\n                 <img alt=\"part7\" class=\"right-leg\" *ngIf=\"counter<5\"\n                      src=\"https://raw.githubusercontent.com/netguru/frontend-recruitment-task/master/imgs/right-leg.png\">\n                 <img alt=\"part8\" class=\"left-leg\" *ngIf=\"counter<4\"\n                      src=\"https://raw.githubusercontent.com/netguru/frontend-recruitment-task/master/imgs/right-leg.png\">\n                 <img alt=\"part9\" class=\"right-foot\" *ngIf=\"counter<3\"\n                      src=\"https://raw.githubusercontent.com/netguru/frontend-recruitment-task/master/imgs/right-foot.png\">\n                 <img alt=\"part10\" class=\"left-foot\" *ngIf=\"counter<2\"\n                      src=\"https://raw.githubusercontent.com/netguru/frontend-recruitment-task/master/imgs/right-foot.png\">\n               </div>\n               <div class=\"word-section\">\n                 <ul>\n                   <li *ngFor=\"#letter of wordArrDashes\"><span>{{letter}}</span></li>\n                 </ul>\n               </div>\n               <div>Number of Remaining Attempts: <span class=\"counter\">{{counter}}</span></div>\n               <span>Write One Letter And Check It ... </span>\n               <input type=\"text\" maxlength=\"1\" #inputLetter (keyup)=\"0\">\n               <button (click)=\"checkLetter(inputLetter.value)\" [disabled]=\"inputLetter.value.length=='0'\">Check</button>\n               <span class=\"uwaga\" *ngIf=\"inputLetter.value.length=='0'\">Enter One Letter Please!</span>\n             </div>\n             <div class=\"game-over\" *ngIf=\"!playIt\">\n               <img src=\"https://raw.githubusercontent.com/netguru/frontend-recruitment-task/master/sources/hangman-game-over.png\" alt=\"game over\">\n             </div>\n             <div class=\"congrate\" *ngIf=\"congrate\">\n               <img src=\"http://i45.tinypic.com/adont0.gif[\" alt=\"Congrate\">\n             </div>                        \n           </div>\n         </div>\n       </div>\n     </div>\n "
                    }), 
                    __metadata('design:paramtypes', [])
                ], GameComponent);
                return GameComponent;
            }());
            exports_1("GameComponent", GameComponent);
        }
    }
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUMsTUFBTSxFQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNsRCxDQUFDO2dCQUVELG9DQUFvQztnQkFDcEMsbUNBQVcsR0FBWCxVQUFZLElBQUksRUFBRSxJQUFJO29CQUNwQixFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUM7d0JBQzdCLE1BQU0sQ0FBQyxLQUFLLENBQUM7b0JBQ2YsR0FBRyxDQUFBLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDO3dCQUM5QixFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDOzRCQUNyQixNQUFNLENBQUMsS0FBSyxDQUFDO29CQUNqQixDQUFDO29CQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQ2QsQ0FBQztnQkFFRCx3Q0FBd0M7Z0JBQ3hDLG9DQUFZLEdBQVosVUFBYSxHQUFHLEVBQUUsR0FBRztvQkFDbkIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO2dCQUMvRCxDQUFDO2dCQTdJSDtvQkFBQyxnQkFBUyxDQUFDO3dCQUNWLFFBQVEsRUFBRSxVQUFVO3dCQUNwQixRQUFRLEVBQUUsc2tIQW1EVDtxQkFDRCxDQUFDOztpQ0FBQTtnQkEySEYsb0JBQUM7WUFBRCxDQXhIQSxBQXdIQyxJQUFBO1lBeEhELHlDQXdIQyxDQUFBIiwiZmlsZSI6ImdhbWUuY29tcG9uZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIE9uSW5pdH0gZnJvbSAnYW5ndWxhcjIvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuIHNlbGVjdG9yOiAnZ2FtZUNvbXAnLFxyXG4gdGVtcGxhdGU6IGBcclxuICAgICA8ZGl2IGNsYXNzPVwiZ2FtZS1zZWN0aW9uXCI+XHJcbiAgICAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XHJcbiAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cclxuICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXhzLTEyXCI+IFxyXG4gICAgICAgICAgICAgPGRpdiAqbmdJZj1cInBsYXlJdCAmJiAhY29uZ3JhdGVcIj5cclxuICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJveFwiPlxyXG4gICAgICAgICAgICAgICAgIDxpbWcgYWx0PVwicGFydDFcIiBjbGFzcz1cImhlYWRcIiAqbmdJZj1cImNvdW50ZXI8MTJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgc3JjPVwiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL25ldGd1cnUvZnJvbnRlbmQtcmVjcnVpdG1lbnQtdGFzay9tYXN0ZXIvaW1ncy9oZWFkLnBuZ1wiPlxyXG4gICAgICAgICAgICAgICAgIDxpbWcgYWx0PVwicGFydDFcIiBjbGFzcz1cIm5lY2tcIiAqbmdJZj1cImNvdW50ZXI8MTFcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgc3JjPVwiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL25ldGd1cnUvZnJvbnRlbmQtcmVjcnVpdG1lbnQtdGFzay9tYXN0ZXIvaW1ncy9uZWNrLnBuZ1wiPlxyXG4gICAgICAgICAgICAgICAgIDxpbWcgYWx0PVwicGFydDJcIiBjbGFzcz1cImNvcnB1c1wiICpuZ0lmPVwiY291bnRlcjwxMFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBzcmM9XCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vbmV0Z3VydS9mcm9udGVuZC1yZWNydWl0bWVudC10YXNrL21hc3Rlci9pbWdzL2NvcnB1cy5wbmdcIj5cclxuICAgICAgICAgICAgICAgICA8aW1nIGFsdD1cInBhcnQzXCIgY2xhc3M9XCJyaWdodC1hcm1cIiAqbmdJZj1cImNvdW50ZXI8OVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBzcmM9XCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vbmV0Z3VydS9mcm9udGVuZC1yZWNydWl0bWVudC10YXNrL21hc3Rlci9pbWdzL3JpZ2h0LWFybS5wbmdcIj5cclxuICAgICAgICAgICAgICAgICA8aW1nIGFsdD1cInBhcnQ0XCIgY2xhc3M9XCJsZWZ0LWFybVwiICpuZ0lmPVwiY291bnRlcjw4XCJcclxuICAgICAgICAgICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9uZXRndXJ1L2Zyb250ZW5kLXJlY3J1aXRtZW50LXRhc2svbWFzdGVyL2ltZ3MvbGVmdC1hcm0ucG5nXCI+XHJcbiAgICAgICAgICAgICAgICAgPGltZyBhbHQ9XCJwYXJ0NVwiIGNsYXNzPVwicmlnaHQtaGFuZFwiICpuZ0lmPVwiY291bnRlcjw3XCJcclxuICAgICAgICAgICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9uZXRndXJ1L2Zyb250ZW5kLXJlY3J1aXRtZW50LXRhc2svbWFzdGVyL2ltZ3MvcmlnaHQtaGFuZC5wbmdcIj5cclxuICAgICAgICAgICAgICAgICA8aW1nIGFsdD1cInBhcnQ2XCIgY2xhc3M9XCJsZWZ0LWhhbmRcIiAqbmdJZj1cImNvdW50ZXI8NlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBzcmM9XCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vbmV0Z3VydS9mcm9udGVuZC1yZWNydWl0bWVudC10YXNrL21hc3Rlci9pbWdzL3JpZ2h0LWhhbmQucG5nXCI+XHJcbiAgICAgICAgICAgICAgICAgPGltZyBhbHQ9XCJwYXJ0N1wiIGNsYXNzPVwicmlnaHQtbGVnXCIgKm5nSWY9XCJjb3VudGVyPDVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgc3JjPVwiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL25ldGd1cnUvZnJvbnRlbmQtcmVjcnVpdG1lbnQtdGFzay9tYXN0ZXIvaW1ncy9yaWdodC1sZWcucG5nXCI+XHJcbiAgICAgICAgICAgICAgICAgPGltZyBhbHQ9XCJwYXJ0OFwiIGNsYXNzPVwibGVmdC1sZWdcIiAqbmdJZj1cImNvdW50ZXI8NFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBzcmM9XCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vbmV0Z3VydS9mcm9udGVuZC1yZWNydWl0bWVudC10YXNrL21hc3Rlci9pbWdzL3JpZ2h0LWxlZy5wbmdcIj5cclxuICAgICAgICAgICAgICAgICA8aW1nIGFsdD1cInBhcnQ5XCIgY2xhc3M9XCJyaWdodC1mb290XCIgKm5nSWY9XCJjb3VudGVyPDNcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgc3JjPVwiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL25ldGd1cnUvZnJvbnRlbmQtcmVjcnVpdG1lbnQtdGFzay9tYXN0ZXIvaW1ncy9yaWdodC1mb290LnBuZ1wiPlxyXG4gICAgICAgICAgICAgICAgIDxpbWcgYWx0PVwicGFydDEwXCIgY2xhc3M9XCJsZWZ0LWZvb3RcIiAqbmdJZj1cImNvdW50ZXI8MlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBzcmM9XCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vbmV0Z3VydS9mcm9udGVuZC1yZWNydWl0bWVudC10YXNrL21hc3Rlci9pbWdzL3JpZ2h0LWZvb3QucG5nXCI+XHJcbiAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwid29yZC1zZWN0aW9uXCI+XHJcbiAgICAgICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgICAgPGxpICpuZ0Zvcj1cIiNsZXR0ZXIgb2Ygd29yZEFyckRhc2hlc1wiPjxzcGFuPnt7bGV0dGVyfX08L3NwYW4+PC9saT5cclxuICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgPGRpdj5OdW1iZXIgb2YgUmVtYWluaW5nIEF0dGVtcHRzOiA8c3BhbiBjbGFzcz1cImNvdW50ZXJcIj57e2NvdW50ZXJ9fTwvc3Bhbj48L2Rpdj5cclxuICAgICAgICAgICAgICAgPHNwYW4+V3JpdGUgT25lIExldHRlciBBbmQgQ2hlY2sgSXQgLi4uIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbWF4bGVuZ3RoPVwiMVwiICNpbnB1dExldHRlciAoa2V5dXApPVwiMFwiPlxyXG4gICAgICAgICAgICAgICA8YnV0dG9uIChjbGljayk9XCJjaGVja0xldHRlcihpbnB1dExldHRlci52YWx1ZSlcIiBbZGlzYWJsZWRdPVwiaW5wdXRMZXR0ZXIudmFsdWUubGVuZ3RoPT0nMCdcIj5DaGVjazwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInV3YWdhXCIgKm5nSWY9XCJpbnB1dExldHRlci52YWx1ZS5sZW5ndGg9PScwJ1wiPkVudGVyIE9uZSBMZXR0ZXIgUGxlYXNlITwvc3Bhbj5cclxuICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgPGRpdiBjbGFzcz1cImdhbWUtb3ZlclwiICpuZ0lmPVwiIXBsYXlJdFwiPlxyXG4gICAgICAgICAgICAgICA8aW1nIHNyYz1cImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9uZXRndXJ1L2Zyb250ZW5kLXJlY3J1aXRtZW50LXRhc2svbWFzdGVyL3NvdXJjZXMvaGFuZ21hbi1nYW1lLW92ZXIucG5nXCIgYWx0PVwiZ2FtZSBvdmVyXCI+XHJcbiAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb25ncmF0ZVwiICpuZ0lmPVwiY29uZ3JhdGVcIj5cclxuICAgICAgICAgICAgICAgPGltZyBzcmM9XCJodHRwOi8vaTQ1LnRpbnlwaWMuY29tL2Fkb250MC5naWZbXCIgYWx0PVwiQ29uZ3JhdGVcIj5cclxuICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICA8L2Rpdj5cclxuICAgICAgIDwvZGl2PlxyXG4gICAgIDwvZGl2PlxyXG4gYFxyXG59KVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBHYW1lQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0e1xyXG4gIHB1YmxpYyBwbGF5SXQgPSB0cnVlOyAgICAgICAvLyBQbGF5IGlzIGF2YWxpYWJsZVxyXG4gIHB1YmxpYyBjb25ncmF0ZSA9IGZhbHNlOyAgICAvLyBUaGUgcGxheWVyIHdpblxyXG4gIHB1YmxpYyBjb3VudGVyID0gMTI7ICAgICAgICAvLyBIb3cgbWFueSB3cm9uZyB0aW1lcyBwbGF5ZXIgY2FuIGRvXHJcbiAgcHVibGljIHJhbmRvbVdvcmQ6IHN0cmluZzsgIC8vIFRoZSByYW5kb20gd29yZFxyXG4gIHB1YmxpYyB3b3JkOiBzdHJpbmc7ICAgICAgICAvLyBUaGUgcmFuZG9tIHdvcmQgd2l0aCBsb3dlcmNhc2UgXHJcbiAgcHVibGljIHdvcmRBcnIgPSBbXTsgICAgICAgIC8vIENvbnZlcnQgdGhlIHdvcmQgdG8gYXJyYXkgb2YgbGV0dGVyc1xyXG4gIHB1YmxpYyB3b3JkQXJyRGFzaGVzOiBbXTsgICAvLyBBcnJheSBvZiBkYXNoZXMgd2l0aCBzYW1lIHNpemUgb2YgdGhlIG1pc3Npbmcgd29yZFxyXG4gIHB1YmxpYyBudW0xOiBudW1iZXI7ICAgICAgICAvLyByYW5kb20gbnVtYmVyIHJlcHJlc2VudHMgd2hpY2ggd29yZHMgY2F0ZWdvcnkgZnJvbSB0aGUgZGF0YXNldFxyXG4gIHB1YmxpYyBudW0yOiBudW1iZXI7ICAgICAgICAvLyByYW5kb20gbnVtYmVyIHJlcHJlc2VudHMgd2hpY2ggd29yZCBmcm9tIHRoZSB3b3JkcyBjYXRlZ29yeVxyXG5cclxuICBuZ09uSW5pdCgpOmFueSB7XHJcbiAgICB0aGlzLmRlY2xlYXJEYXRlKCk7XHJcbiAgICAvLyBKdXN0IGZvciB0ZXN0ZXIsIHRvIGtub3cgd2hhdCBpcyB0aGUgbWlzc2luZyB3b3JkXHJcbiAgICBjb25zb2xlLmxvZyh0aGlzLnJhbmRvbVdvcmQpO1xyXG4gIH1cclxuXHJcbiAgLy8gR2l2ZSB2YWx1ZXMgZm9yIHZhcmlhYmxlc1xyXG4gIGRlY2xlYXJEYXRlKCl7XHJcbiAgICB0aGlzLm51bTEgPSB0aGlzLmdldFJhbmRvbUludCgwLCB0aGlzLmluZm8ubGVuZ3RoKTtcclxuICAgIHRoaXMubnVtMiA9IHRoaXMuZ2V0UmFuZG9tSW50KDAsIHRoaXMuaW5mb1t0aGlzLm51bTFdLndvcmRzLmxlbmd0aCk7XHJcbiAgICB0aGlzLnJhbmRvbVdvcmQgPSB0aGlzLmluZm9bdGhpcy5udW0xXS53b3Jkc1t0aGlzLm51bTJdO1xyXG4gICAgdGhpcy53b3JkID0gdGhpcy5yYW5kb21Xb3JkLnRvTG93ZXJDYXNlKCk7XHJcbiAgICB0aGlzLndvcmRBcnIgPSB0aGlzLndvcmQuc3BsaXQoXCJcIik7XHJcbiAgICB0aGlzLndvcmRBcnJEYXNoZXMgPSB0aGlzLmZpbGxBcnJheShcIl9cIiwgdGhpcy53b3JkQXJyLmxlbmd0aCk7XHJcbiAgICB0aGlzLmZpbGxTcGFjZXMoKTtcclxuICB9XHJcblxyXG4gIC8vIENhbGxlZCB3aGVuIHRoZSB1c2VyIHByZXNzICdDaGVjaycgYnV0dG9uXHJcbiAgY2hlY2tMZXR0ZXIobGV0dGVyOiBzdHJpbmcpe1xyXG4gICAgdGhpcy5sZXR0ZXJJbkFycmF5KHRoaXMud29yZEFyciwgdGhpcy53b3JkQXJyRGFzaGVzLCBsZXR0ZXIudG9Mb3dlckNhc2UoKSwgdGhpcy53b3JkQXJyLmxlbmd0aCk7XHJcbiAgfSBcclxuXHJcbiAgLy8gTWFrZSBhcnJheSBvZiBkYXNoZXMgd2l0aCBzYW1lIGxlbmd0aCBvZiB0aGUgd29yZFxyXG4gIGZpbGxBcnJheSh2YWx1ZSwgbGVuKSB7XHJcbiAgICB2YXIgYXJyID0gW107XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgIGFyci5wdXNoKHZhbHVlKTtcclxuICAgIH1cclxuICAgIHJldHVybiBhcnI7XHJcbiAgfVxyXG5cclxuICAvL0ZpbGwgZG93biBhbGwgc3BhY2VzXHJcbiAgZmlsbFNwYWNlcygpe1xyXG4gICAgZm9yKHZhciBpID0gMDsgaSA8IHRoaXMud29yZEFyci5sZW5ndGg7IGkrKyl7XHJcbiAgICAgIGlmKHRoaXMud29yZEFycltpXSA9PSAnICcpe1xyXG4gICAgICAgIHRoaXMud29yZEFyckRhc2hlc1tpXSA9ICcgJztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy9DaGVjayBpZiB0aGUgbGV0dGVyIGlzIGluIHRoZSBhcnJheSBhbmQgY2hlY2sgTnVtYmVyIG9mIFJlbWFpbmluZyBBdHRlbXB0cyBhbmQgKENvbmdyYXRlIG9yIEdhbWUgb3ZlcilcclxuICBsZXR0ZXJJbkFycmF5KG9sZEFyciwgbmV3QXJyLCBsZXR0ZXIsIGxlbil7XHJcbiAgICB2YXIgaW5JdCA9IDA7XHJcbiAgICB2YXIgY29ycmVjdENvdW50ZXIgPSAwO1xyXG4gICAgZm9yKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKXtcclxuICAgICAgaWYob2xkQXJyW2ldID09IGxldHRlcil7XHJcbiAgICAgICAgbmV3QXJyW2ldID0gbGV0dGVyO1xyXG4gICAgICAgICsraW5JdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZihpbkl0IDw9IDApe1xyXG4gICAgICB0aGlzLmNvdW50ZXIgLT0gMTtcclxuICAgICAgaWYodGhpcy5jb3VudGVyIDw9IDApe1xyXG4gICAgICAgIHRoaXMucGxheUl0ID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMuY29uZ3JhdGUgPSB0aGlzLmFycmF5c0VxdWFsKG9sZEFycixuZXdBcnIpO1xyXG4gIH1cclxuXHJcbiAgLy8gQ2hlY2sgVHdvIEFycmF5cyBpZiB0aGV5IGFyZSBzYW1lXHJcbiAgYXJyYXlzRXF1YWwoYXJyMSwgYXJyMikge1xyXG4gICAgaWYoYXJyMS5sZW5ndGggIT09IGFycjIubGVuZ3RoKVxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBmb3IodmFyIGkgPSBhcnIxLmxlbmd0aDsgaS0tOykge1xyXG4gICAgICBpZihhcnIxW2ldICE9PSBhcnIyW2ldKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLy8gR2V0IHJhbmRvbSBudW1iZXIgYmV0d2VlbiB0d28gbnVtYmVyc1xyXG4gIGdldFJhbmRvbUludChtaW4sIG1heCkge1xyXG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgobWF4LTEpIC0gbWluICsgMSkpICsgbWluO1xyXG4gIH1cclxuIC8qXHJcbiAgIFJlYWwgZGF0YSBmcm9tIHdvcmRuaWsgZnJvbSB0aGlzIGxpbms6IFxyXG4gICBodHRwOi8vYXBpLndvcmRuaWsuY29tOjgwL3Y0L3dvcmQuanNvbi9mb3Jlc3QvcmVsYXRlZFdvcmRzP3VzZUNhbm9uaWNhbD1mYWxzZSZsaW1pdFBlclJlbGF0aW9uc2hpcFR5cGU9MTAwMCZhcGlfa2V5PWEyYTczZTdiOTI2YzkyNGZhZDcwMDFjYTMxMTFhY2Q1NWFmMmZmYWJmNTBlYjRhZTVcclxuICAqL1xyXG4gIHB1YmxpYyBpbmZvID0gW1xyXG4gICAgICB7XHJcbiAgICAgICAgXCJyZWxhdGlvbnNoaXBUeXBlXCI6XCJhbnRvbnltXCIsXHJcbiAgICAgICAgXCJ3b3Jkc1wiOltcInByYWlyaWVcIl1cclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIFwicmVsYXRpb25zaGlwVHlwZVwiOlwidmVyYi1mb3JtXCIsXHJcbiAgICAgICAgXCJ3b3Jkc1wiOltcImZvcmVkXCIsXCJmb3Jlc3RlZFwiLFwiZm9yZXN0aW5nXCIsXCJmb3Jlc3RzXCJdXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBcInJlbGF0aW9uc2hpcFR5cGVcIjpcImNyb3NzLXJlZmVyZW5jZVwiLFxyXG4gICAgICAgIFwid29yZHNcIjpbXCJjcm93biBmb3Jlc3RcIixcImNvbXBvc2l0ZSBmb3Jlc3RcIixcIm5hdGlvbmFsIGZvcmVzdFwiLFwicmlnaHQgb2YgZm9yZXN0XCIsXCJ0b3duIGZvcmVzdFwiLFwicmFpbiBmb3Jlc3RcIixcInNwcm91dCBmb3Jlc3RcIixcInNhdmFubmEgZm9yZXN0XCIsXCJmb3Jlc3QgbGliZXJ0aWVzXCIsXCJmb3Jlc3QgbGF3XCIsXCJmZWRlcmFsIGZvcmVzdCByZXNlcnZlXCIsXCJkcmlmdCBvZiB0aGUgZm9yZXN0XCIsXCJmcmluZ2luZyBmb3Jlc3RcIixcInByb3RlY3Rpb24gZm9yZXN0XCIsXCJzb2lsXCIsXCJmb3Jlc3QgYXJteS13b3JtXCIsXCJwdXJlIGZvcmVzdFwiLFwicGFyayBmb3Jlc3RcIixcInN1Ym1hcmluZSBmb3Jlc3RcIixcIm5vcm1hbCBmb3Jlc3RcIixcImtlZXBlciBvZiB0aGUgZm9yZXN0XCIsXCJvcmRpbmFuY2Ugb2YgdGhlIGZvcmVzdFwiLFwiZm9yZXN0IHNlcnZpY2VcIixcImZvcmVzdCBpbmZsdWVuY2VzXCIsXCJmb3Jlc3QtYmVkIGdyb3VwXCIsXCJuYXRpb25hbCBmb3Jlc3QgcmVzZXJ2ZVwiLFwiY2hhcnRlciBvZiB0aGUgZm9yZXN0XCIsXCJhYnNvbHV0ZSBmb3Jlc3QgbGFuZFwiLFwiY29tbXVuYWwgZm9yZXN0XCIsXCJtb25zb29uIGZvcmVzdFwiLFwiZm9yZXN0IGNvdXJ0XCIsXCJjcm9tZXIgZm9yZXN0LWJlZFwiLFwiaW5kZXggZm9yZXN0XCIsXCJmb3Jlc3QgZmxvb3JcIixcImxpZ2h0IGZvcmVzdFwiLFwidGhvcm4gZm9yZXN0XCIsXCJob2x0XCIsXCJ3b29kXCIsXCJqdW5nbGVcIixcImRlZm9yZXN0XCIsXCJ3ZWFsZFwiLFwiYnVzaFwiLFwid29vZGxhbmRcIixcIndvb2RzXCJdXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBcInJlbGF0aW9uc2hpcFR5cGVcIjpcImV0eW1vbG9naWNhbGx5LXJlbGF0ZWQtdGVybVwiLFxyXG4gICAgICAgIFwid29yZHNcIjpbXCJhZmZvcmVzdFwiXVxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgXCJyZWxhdGlvbnNoaXBUeXBlXCI6XCJzeW5vbnltXCIsXHJcbiAgICAgICAgXCJ3b3Jkc1wiOltcInN5bHZhblwiLFwid29vZGxhbmRcIixcIndpbGR3b29kXCJdXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBcInJlbGF0aW9uc2hpcFR5cGVcIjpcInJoeW1lXCIsXHJcbiAgICAgICAgXCJ3b3Jkc1wiOltcIkZvcnJlc3RcIixcImRlZm9yZXN0XCIsXCJmbG9yaXN0XCIsXCJyZWZvcmVzdFwiXVxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgXCJyZWxhdGlvbnNoaXBUeXBlXCI6XCJzYW1lLWNvbnRleHRcIixcclxuICAgICAgICBcIndvcmRzXCI6W1wid29vZFwiLFwibW91bnRhaW5cIixcImp1bmdsZVwiLFwiZGVzZXJ0XCIsXCJnYXJkZW5cIixcImxhbmRcIixcImdyb3ZlXCIsXCJzZWFcIixcImdyYXNzXCIsXCJmaWVsZFwiLFwic2t5XCIsXCJvY2VhblwiLFwicmVnaW9uXCIsXCJtZWFkb3dcIixcImxhbmRzY2FwZVwiXVxyXG4gICAgICB9XHJcbiAgXTtcclxuXHJcbn0iXX0=
